======================
Using 0-add_integer.py
======================

This module defines a function that adds two integers ``add_integer(a, b=98)``.

Usage
=====

First import ``add_integer`` from the ``0-add_integer`` module:
	>>> add_integer = __import__('0-add_integer').add_integer

Now use it:
	>>> add_integer(2, 3)
	5

	>>> add_integer(2, -3)
	-1

Testing with floating-point values:
	>>> add_integer(2.0, 3.0)
	5

	>>> add_integer(-2.9, -0.2)
	-2

Testing with combined floating and non-floating point values:
	>>> add_integer(2.3, -3)
	-1

Testing without second argument (98 by default):
	>>> add_integer(1)
	99

``add_integer()`` expects that both arguments are either integers or floats.
If either argument is a non-integer and non-float, a TypeError is raised:
	>>> add_integer("hello", 3)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(2, "welcome")
	Traceback (most recent call last):
	TypeError: b must be an integer

	>>> add_integer(None)
	Traceback (most recent call last):
	TypeError: a must be an integer

	>>> add_integer(2.3, None)
	Traceback (most recent call last):
	TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument:
	>>> add_integer("hello", "there")
	Traceback (most recent call last):
	TypeError: a must be an integer

The function fails if infinity is provided:
	>>> add_integer(float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

	>>> add_integer(7, float('inf'))
	Traceback (most recent call last):
	OverflowError: cannot convert float infinity to integer

Testing NaN numbers:
	>>> add_integer(float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer

	>>> add_integer(2, float('nan'))
	Traceback (most recent call last):
	ValueError: cannot convert float NaN to integer
